name: Build .NET SDK

on:
  workflow_dispatch:
  push:
      tags:
        - 'v*'
env:
  PACKAGESDIR: ${{ github.workspace }}/packages
  DOWNLOADDIR: ${{ github.workspace }}/downloads
  OUTPUTDIR: ${{ github.workspace }}/output
  RELEASE_VERSION: 8.0.100
  RUNTIME_VERSION: 8.0.0-rtm.23531.3
  SDK_VERSION: 8.0.100-rtm.23551.6
  ASPNETCORE_VERSION: 8.0.0-rtm.23531.12
  ROOTFS_DIR: /crossrootfs/riscv64

jobs:
  build_runtime:
    name: Build .NET Runtime
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-cross-riscv64

    steps:
      - name: Clone repository
        run: git clone --depth 1 -b v8.0.0 https://github.com/dotnet/runtime
        # cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            runtime/.dotnet/
            runtime/artifacts/
          key: ${{ runner.os }}-runtime-riscv64-${{ env.RUNTIME_VERSION }}

      - name: Build runtime
        run: |
          mkdir -p ${{ env.PACKAGESDIR }}
          mkdir -p ${{ env.DOWNLOADDIR }}
          mkdir -p ${{ env.OUTPUTDIR }}
          cd runtime
          ./build.sh --ci -c Release --cross --arch riscv64 --usemonoruntime
          cp artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Host.linux-riscv64.*.nupkg ${{ env.PACKAGESDIR }}
          cp artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-riscv64.*.nupkg ${{ env.PACKAGESDIR }}
          mkdir -p ${{ env.DOWNLOADDIR }}/Runtime/${{ env.RUNTIME_VERSION}}
          cp artifacts/packages/Release/Shipping/dotnet-runtime-*-linux-riscv64.tar.gz ${{ env.DOWNLOADDIR }}/Runtime/${{ env.RUNTIME_VERSION}}
          cp artifacts/packages/Release/Shipping/dotnet-runtime-*-linux-riscv64.tar.gz ${{ env.OUTPUTDIR }}
          cp artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Host.linux-riscv64.*.nupkg ${{ env.OUTPUTDIR }}
          cp artifacts/packages/Release/Shipping/Microsoft.NETCore.App.Runtime.linux-riscv64.*.nupkg ${{ env.OUTPUTDIR }}
          cp artifacts/packages/Release/Shipping/runtime.linux-riscv64.Microsoft.NETCore.DotNetHost.*.nupkg ${{ env.OUTPUTDIR }}
          cp artifacts/packages/Release/Shipping/runtime.linux-riscv64.Microsoft.NETCore.DotNetHostPolicy.*.nupkg ${{ env.OUTPUTDIR }}
          cp artifacts/packages/Release/Shipping/runtime.linux-riscv64.Microsoft.NETCore.DotNetHostResolver.*.nupkg ${{ env.OUTPUTDIR }}
          cp artifacts/packages/Release/Shipping/runtime.linux-riscv64.Microsoft.NETCore.ILAsm.*.nupkg ${{ env.OUTPUTDIR }}
          cp artifacts/packages/Release/Shipping/runtime.linux-riscv64.Microsoft.NETCore.ILDAsm.*.nupkg ${{ env.OUTPUTDIR }}
      - name: compress files 
        run: tar -zcf artifacts-runtime.tar.gz -C ${{ github.workspace }}/ packages downloads output

      - name: Upload .Net Runtime Artifacts
        uses: actions/upload-artifact@v4
        with:
          retention-days: 1
          name: artifacts-runtime-riscv64-${{ env.RUNTIME_VERSION }}
          path: artifacts-runtime.tar.gz

  build_SDK:
    name: Build .NET SDK
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-cross-riscv64

    steps:
    - name: Update Node.js
      run: |
        apt-get update
        apt-get autoremove -y nodejs
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && apt-get install -y nodejs
    - name: Clone repositories
      run: git clone --depth 1 -b v8.0.100 https://github.com/dotnet/sdk
    # cache
    - name: Cache
      uses: actions/cache@v2
      with:
        path: |
          sdk/.dotnet/
          sdk/artifacts/
        key: ${{ runner.os }}-SDK-riscv64-${{ env.SDK_VERSION }}
    - name: Build SDK
      run: |
        mkdir -p ${{ env.PACKAGESDIR }}
        mkdir -p ${{ env.DOWNLOADDIR }}
        mkdir -p ${{ env.OUTPUTDIR }}
        cd sdk
        ./build.sh --pack --ci -c Release /p:Architecture=riscv64
        mkdir -p ${{ env.DOWNLOADDIR }}/Sdk/${{ env.SDK_VERSION}}
        cp artifacts/packages/Release/NonShipping/dotnet-toolset-internal-*.zip ${{ env.DOWNLOADDIR }}/Sdk/${{ env.SDK_VERSION}}/dotnet-toolset-internal-${{ env.SDK_VERSION}}.zip
        cp artifacts/packages/Release/Shipping/Microsoft.DotNet.Common.*.nupkg ${{ env.PACKAGESDIR }}
    - name: compress files 
      run: tar -zcf artifacts-SDK.tar.gz -C ${{ github.workspace }}/ packages downloads output

    - name: Upload .Net SDK Artifacts
      uses: actions/upload-artifact@v4
      with:
        retention-days: 1
        name: artifacts-SDK-riscv64-${{ env.SDK_VERSION }}
        path: artifacts-SDK.tar.gz


  build_aspnetcore:
    name: Build .NET aspnetcore
    runs-on: ubuntu-latest
    needs: build_runtime
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-cross-riscv64

    steps:
    - name: Update Node.js
      run: |
        apt-get update
        apt-get autoremove -y nodejs
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && apt-get install -y nodejs
    - name: Clone repositories
      run: git clone --depth 1 -b v8.0.0 https://github.com/dotnet/aspnetcore --recurse-submodules
    # cache
    - name: Cache
      uses: actions/cache@v2
      with:
        path: |
          aspnetcore/.dotnet/
          aspnetcore/artifacts/
        key: ${{ runner.os }}-aspnetcore-riscv64-${{ env.ASPNETCORE_VERSION }}

    - name: Download .Net Runtime Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-runtime-riscv64-${{ env.RUNTIME_VERSION }}
    - name: Decompress Artifacts
      run: |
        mkdir -p ${{ github.workspace }}
        tar -zxf artifacts-runtime.tar.gz -C ${{ github.workspace }}
    - name: Build .NET aspnetcore
      run: |
        cd aspnetcore
        sed -i "s|ppc64le|riscv64|" src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj
        sed -i "s|\$(BaseIntermediateOutputPath)\$(DotNetRuntimeArchiveFileName)|${{ env.DOWNLOADDIR }}/Runtime/${{ env.RUNTIME_VERSION}}/dotnet-runtime-8.0.0-linux-riscv64.tar.gz|" src/Framework/App.Runtime/src/Microsoft.AspNetCore.App.Runtime.csproj
        ./eng/build.sh --pack --ci -c Release -arch riscv64 /p:DotNetAssetRootUrl=file://${{ env.DOWNLOADDIR }}/
        cp artifacts/packages/Release/Shipping/Microsoft.AspNetCore.App.Runtime.linux-riscv64.*.nupkg ${{ env.PACKAGESDIR }}
        mkdir -p ${{ env.DOWNLOADDIR }}/aspnetcore/Runtime/${ASPNETCORE_VERSION}
        cp artifacts/installers/Release/aspnetcore-runtime-*-linux-riscv64.tar.gz ${{ env.DOWNLOADDIR }}/aspnetcore/Runtime/${ASPNETCORE_VERSION}
        cp artifacts/installers/Release/aspnetcore_base_runtime.version ${{ env.DOWNLOADDIR }}/aspnetcore/Runtime/${ASPNETCORE_VERSION}
        cp artifacts/packages/Release/Shipping/Microsoft.AspNetCore.App.Runtime.linux-riscv64.*.nupkg ${{ env.OUTPUTDIR }}
        cp artifacts/packages/Release/Shipping/Microsoft.DotNet.Web.*.nupkg ${{ env.PACKAGESDIR }}
    - name: compress files 
      run: tar -zcf artifacts-aspnetcore.tar.gz -C ${{ github.workspace }}/ packages downloads output

    - name: Upload .Net SDK Artifacts
      uses: actions/upload-artifact@v4
      with:
        retention-days: 1
        name: artifacts-aspnetcore-riscv64-${{ env.ASPNETCORE_VERSION }}
        path: artifacts-aspnetcore.tar.gz


  build_installer:
    name: Build .NET installer
    runs-on: ubuntu-latest
    needs: [build_aspnetcore, build_SDK]
    container:
      image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-cross-riscv64

    steps:
    - name: Clone repositories
      run: git clone --depth 1 -b v8.0.100 https://github.com/dotnet/installer
    # cache
    - name: Cache
      uses: actions/cache@v2
      with:
        path: |
          installer/.dotnet/
          installer/artifacts/
        key: ${{ runner.os }}-installer-riscv64-${{ env.ASPNETCORE_VERSION }}

    - name: Download .Net Runtime & aspnetcore Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-aspnetcore-riscv64-${{ env.ASPNETCORE_VERSION }}
    - name: Download .Net SDK Artifacts
      uses: actions/download-artifact@v4
      with:
        name: artifacts-SDK-riscv64-${{ env.SDK_VERSION }}
    - name: Decompress Artifacts
      run: |
        mkdir -p ${{ github.workspace }}
        tar -zxf artifacts-aspnetcore.tar.gz -C ${{ github.workspace }}/
        tar -zxf artifacts-SDK.tar.gz -C ${{ github.workspace }}/
    - name: Build .NET installer
      run: |
        cd installer
        sed -i "s|linux-arm64|linux-riscv64|" src/redist/targets/GenerateBundledVersions.targets
        sed -i "s|linux-arm64|linux-riscv64|" src/SourceBuild/content/eng/bootstrap/buildBootstrapPreviouslySB.csproj
        sed -i s'|ppc64le|riscv64|' Directory.Build.props
        sed -i s'|ppc64le|riscv64|' src/SourceBuild/content/Directory.Build.props
        sed -i s'|ppc64le|riscv64|' src/redist/targets/Crossgen.targets
        sed -i s"|<clear />|<clear />\n<add key='local' value='${{ env.PACKAGESDIR }}' />|" NuGet.config
        ./build.sh --ci -c Release -a riscv64 /p:HostRid=linux-x64 /p:PublicBaseURL=file://${{ env.DOWNLOADDIR }}/
        cp artifacts/packages/Release/Shipping/dotnet-sdk-*-linux-riscv64.tar.gz ${{ env.OUTPUTDIR }}
        cp artifacts/packages/Release/Shipping/dotnet-sdk-*-linux-riscv64.tar.gz.sha512 ${{ env.OUTPUTDIR }}
    - name: Move artifacts
      run: |
        mkdir -p output
        mv ${{ env.OUTPUTDIR }}/dotnet-sdk-*-linux-riscv64.tar.gz* ./output/
    - name: Upload .NET installer
      uses: actions/upload-artifact@v4
      with:
        name: dotnet-sdk-linux-riscv64
        path: "output/dotnet-sdk-*-linux-riscv64.tar.gz*"

  publish_release:
    runs-on: ubuntu-latest
    needs: build_installer
    steps:
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "output/dotnet-sdk-*-linux-riscv64.tar.gz*"
